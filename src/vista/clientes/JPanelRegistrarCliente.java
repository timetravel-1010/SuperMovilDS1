/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista.clientes;

import controlador.ConnectionDB;
import enums.TipoCliente;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import modelo.Cliente;
import modelo.Cuenta;
import modelo.Plan;
import modelo.Planes;

/**
 *
 * @author Arman
 */
public class JPanelRegistrarCliente extends javax.swing.JPanel {
    /**
     * Creates new form JPanelDatosClientes
     */
    private JPanelClientes padreModificar;
    private JPanelClientes padreAdmin;
    private ConnectionDB conexion;
    private Boolean tipoCliente;
    private Cliente clienteActualizar;
    
    public JPanelRegistrarCliente(JPanelClientes papa) { //MÃ©todo para registrar clientes, recibe un JPanelClientes
        this.padreAdmin = papa;
        conexion = new ConnectionDB();
        initComponents();
        this.visiblePanelDerecho(false, false);
        this.rellenarComboBoxDerechos();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSiguiente = new javax.swing.JButton();
        jTextCiudad = new javax.swing.JTextField();
        jTextDireccion = new javax.swing.JTextField();
        jTextTelefono = new javax.swing.JTextField();
        jTextNombre = new javax.swing.JTextField();
        jTextCedula = new javax.swing.JTextField();
        jLabelCedula = new javax.swing.JLabel();
        jLabelNombre = new javax.swing.JLabel();
        jLabelTelefono = new javax.swing.JLabel();
        jLabelDireccion = new javax.swing.JLabel();
        jLabelCiudad = new javax.swing.JLabel();
        jLabelTipo = new javax.swing.JLabel();
        jLabelTituloIzquierdo = new javax.swing.JLabel();
        jComboBoxTipo = new javax.swing.JComboBox<>();
        jButtonAtras = new javax.swing.JButton();
        jLabelTituloDerecho = new javax.swing.JLabel();
        jLabelNumero1 = new javax.swing.JLabel();
        jTextNumero1 = new javax.swing.JTextField();
        jLabelNumero2 = new javax.swing.JLabel();
        jTextNumero2 = new javax.swing.JTextField();
        jLabelNumero3 = new javax.swing.JLabel();
        jTextNumero3 = new javax.swing.JTextField();
        jLabelPlan1 = new javax.swing.JLabel();
        jComboBoxPlan1 = new javax.swing.JComboBox<>();
        jLabelPlan2 = new javax.swing.JLabel();
        jComboBoxPlan2 = new javax.swing.JComboBox<>();
        jLabelPlan3 = new javax.swing.JLabel();
        jComboBoxPlan3 = new javax.swing.JComboBox<>();
        jButtonGenerar1 = new javax.swing.JButton();
        jButtonGenerar2 = new javax.swing.JButton();
        jButtonGenerar3 = new javax.swing.JButton();
        jButtonEnviar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();

        setBackground(new java.awt.Color(218, 234, 255));
        setMinimumSize(new java.awt.Dimension(1110, 600));
        setPreferredSize(new java.awt.Dimension(1110, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButtonSiguiente.setBackground(new java.awt.Color(149, 193, 255));
        jButtonSiguiente.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonSiguiente.setForeground(new java.awt.Color(0, 0, 0));
        jButtonSiguiente.setText("Siguiente");
        jButtonSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSiguientejButtonEnviarActionPerformed(evt);
            }
        });
        add(jButtonSiguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 500, 120, 30));

        jTextCiudad.setBackground(new java.awt.Color(149, 193, 255));
        jTextCiudad.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextCiudad.setForeground(new java.awt.Color(0, 0, 0));
        jTextCiudad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCiudadKeyTyped(evt);
            }
        });
        add(jTextCiudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 290, 230, 30));

        jTextDireccion.setBackground(new java.awt.Color(149, 193, 255));
        jTextDireccion.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextDireccion.setForeground(new java.awt.Color(0, 0, 0));
        jTextDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextDireccionKeyTyped(evt);
            }
        });
        add(jTextDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 350, 230, 30));

        jTextTelefono.setBackground(new java.awt.Color(149, 193, 255));
        jTextTelefono.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextTelefono.setForeground(new java.awt.Color(0, 0, 0));
        jTextTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextTelefonojTextTelefonoActionPerformed(evt);
            }
        });
        jTextTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextTelefonoKeyTyped(evt);
            }
        });
        add(jTextTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 230, 230, 30));

        jTextNombre.setBackground(new java.awt.Color(149, 193, 255));
        jTextNombre.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextNombre.setForeground(new java.awt.Color(0, 0, 0));
        jTextNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextNombreKeyTyped(evt);
            }
        });
        add(jTextNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 170, 230, 30));

        jTextCedula.setBackground(new java.awt.Color(149, 193, 255));
        jTextCedula.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextCedula.setForeground(new java.awt.Color(0, 0, 0));
        jTextCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextCedulajTextCedulaActionPerformed(evt);
            }
        });
        jTextCedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextCedulaKeyTyped(evt);
            }
        });
        add(jTextCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 230, 30));

        jLabelCedula.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelCedula.setForeground(new java.awt.Color(0, 0, 0));
        jLabelCedula.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCedula.setText("Identificacion:");
        add(jLabelCedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 200, 30));

        jLabelNombre.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelNombre.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNombre.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNombre.setText("Nombre:");
        add(jLabelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 200, 30));

        jLabelTelefono.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelTelefono.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTelefono.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTelefono.setText("Telefono:");
        add(jLabelTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 200, 30));

        jLabelDireccion.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelDireccion.setForeground(new java.awt.Color(0, 0, 0));
        jLabelDireccion.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelDireccion.setText("Direccion:");
        add(jLabelDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 200, 30));

        jLabelCiudad.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelCiudad.setForeground(new java.awt.Color(0, 0, 0));
        jLabelCiudad.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelCiudad.setText("Ciudad:");
        add(jLabelCiudad, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 290, 200, 30));

        jLabelTipo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelTipo.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTipo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelTipo.setText("Tipo:");
        add(jLabelTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 200, 30));

        jLabelTituloIzquierdo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelTituloIzquierdo.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTituloIzquierdo.setText("Datos basicos del cliente:");
        add(jLabelTituloIzquierdo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 210, 30));

        jComboBoxTipo.setBackground(new java.awt.Color(149, 193, 255));
        jComboBoxTipo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jComboBoxTipo.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "natural", "corporativo" }));
        jComboBoxTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTipoActionPerformed(evt);
            }
        });
        add(jComboBoxTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 410, 231, 30));

        jButtonAtras.setBackground(new java.awt.Color(149, 193, 255));
        jButtonAtras.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonAtras.setForeground(new java.awt.Color(0, 0, 0));
        jButtonAtras.setText("Atras");
        jButtonAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAtrasActionPerformed(evt);
            }
        });
        add(jButtonAtras, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 500, 120, 30));

        jLabelTituloDerecho.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelTituloDerecho.setForeground(new java.awt.Color(0, 0, 0));
        jLabelTituloDerecho.setText("Asignacion de numeros:");
        add(jLabelTituloDerecho, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 40, 220, 30));

        jLabelNumero1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelNumero1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNumero1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNumero1.setText("Numero de telefono 1:");
        add(jLabelNumero1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 200, 30));

        jTextNumero1.setBackground(new java.awt.Color(149, 193, 255));
        jTextNumero1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextNumero1.setForeground(new java.awt.Color(0, 0, 0));
        jTextNumero1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNumero1jTextCedulaActionPerformed(evt);
            }
        });
        jTextNumero1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextNumero1KeyTyped(evt);
            }
        });
        add(jTextNumero1, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 110, 200, 30));

        jLabelNumero2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelNumero2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNumero2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNumero2.setText("Numero de telefono 2:");
        add(jLabelNumero2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 230, 200, 30));

        jTextNumero2.setBackground(new java.awt.Color(149, 193, 255));
        jTextNumero2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextNumero2.setForeground(new java.awt.Color(0, 0, 0));
        jTextNumero2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNumero2jTextCedulaActionPerformed(evt);
            }
        });
        jTextNumero2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextNumero2KeyTyped(evt);
            }
        });
        add(jTextNumero2, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 230, 200, 30));

        jLabelNumero3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelNumero3.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNumero3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelNumero3.setText("Numero de telefono 3:");
        add(jLabelNumero3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 350, 200, 30));

        jTextNumero3.setBackground(new java.awt.Color(149, 193, 255));
        jTextNumero3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextNumero3.setForeground(new java.awt.Color(0, 0, 0));
        jTextNumero3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNumero3jTextCedulaActionPerformed(evt);
            }
        });
        jTextNumero3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextNumero3KeyTyped(evt);
            }
        });
        add(jTextNumero3, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 350, 200, 30));

        jLabelPlan1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelPlan1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPlan1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPlan1.setText("Plan Pospago:");
        add(jLabelPlan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 170, 200, 30));

        jComboBoxPlan1.setBackground(new java.awt.Color(149, 193, 255));
        jComboBoxPlan1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jComboBoxPlan1.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxPlan1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlan1ActionPerformed(evt);
            }
        });
        add(jComboBoxPlan1, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 170, 315, 30));

        jLabelPlan2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelPlan2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPlan2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPlan2.setText("Plan Pospago:");
        add(jLabelPlan2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 290, 200, 30));

        jComboBoxPlan2.setBackground(new java.awt.Color(149, 193, 255));
        jComboBoxPlan2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jComboBoxPlan2.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxPlan2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlan2ActionPerformed(evt);
            }
        });
        add(jComboBoxPlan2, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 290, 315, 30));

        jLabelPlan3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabelPlan3.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPlan3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelPlan3.setText("Plan Pospago:");
        add(jLabelPlan3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 410, 200, 30));

        jComboBoxPlan3.setBackground(new java.awt.Color(149, 193, 255));
        jComboBoxPlan3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jComboBoxPlan3.setForeground(new java.awt.Color(0, 0, 0));
        jComboBoxPlan3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPlan3ActionPerformed(evt);
            }
        });
        add(jComboBoxPlan3, new org.netbeans.lib.awtextra.AbsoluteConstraints(715, 410, 315, 30));

        jButtonGenerar1.setBackground(new java.awt.Color(149, 193, 255));
        jButtonGenerar1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonGenerar1.setForeground(new java.awt.Color(0, 0, 0));
        jButtonGenerar1.setText("Generar");
        jButtonGenerar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerar1jButtonEnviarActionPerformed(evt);
            }
        });
        add(jButtonGenerar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 110, 100, 30));

        jButtonGenerar2.setBackground(new java.awt.Color(149, 193, 255));
        jButtonGenerar2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonGenerar2.setForeground(new java.awt.Color(0, 0, 0));
        jButtonGenerar2.setText("Generar");
        jButtonGenerar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerar2jButtonEnviarActionPerformed(evt);
            }
        });
        add(jButtonGenerar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 230, 100, 30));

        jButtonGenerar3.setBackground(new java.awt.Color(149, 193, 255));
        jButtonGenerar3.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonGenerar3.setForeground(new java.awt.Color(0, 0, 0));
        jButtonGenerar3.setText("Generar");
        jButtonGenerar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerar3jButtonEnviarActionPerformed(evt);
            }
        });
        add(jButtonGenerar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 350, 100, 30));

        jButtonEnviar.setBackground(new java.awt.Color(149, 193, 255));
        jButtonEnviar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonEnviar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonEnviar.setText("Enviar");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarjButtonEnviarActionPerformed(evt);
            }
        });
        add(jButtonEnviar, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 500, 120, 30));

        jButtonCancelar.setBackground(new java.awt.Color(149, 193, 255));
        jButtonCancelar.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jButtonCancelar.setForeground(new java.awt.Color(0, 0, 0));
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });
        add(jButtonCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 500, 120, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSiguientejButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSiguientejButtonEnviarActionPerformed
        // TODO add your handling code here:
        //Se muestran los elementos del panel derecho dependiendo del tipo de cliente que se desea registrar:
        if(validarRegistroCliente()){//Se hace una validacion inicial del panel izquierdo
                if(!conexion.validarCliente(jTextCedula.getText())){//Segunda validacion, se valida si ya esta registrado el cliente
                    tipoCliente = (jComboBoxTipo.getItemAt(jComboBoxTipo.getSelectedIndex())).equals("natural");
                    this.visiblePanelDerecho(true, false);
                    //Se inhabilitan los elementos del panel izquierdo:
                    this.enablePanelIzquierdo(false);
                } else {//Ya hay un cliente con ea cedula
                    JOptionPane.showMessageDialog(null, "Â¡Ya existe un cliente registrado con esa cedula!",
                            "Cedula encontrada", JOptionPane.ERROR_MESSAGE);
                }
        }
    }//GEN-LAST:event_jButtonSiguientejButtonEnviarActionPerformed

    private void jTextTelefonojTextTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextTelefonojTextTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextTelefonojTextTelefonoActionPerformed

    private void jTextCedulajTextCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextCedulajTextCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextCedulajTextCedulaActionPerformed

    private void jComboBoxTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTipoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxTipoActionPerformed

    private void jButtonAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAtrasActionPerformed
        // TODO add your handling code here:
        //Se oculta el panel derecho
        this.visiblePanelDerecho(false, false);
        this.enablePanelIzquierdo(true);
    }//GEN-LAST:event_jButtonAtrasActionPerformed

    private void jTextNumero1jTextCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNumero1jTextCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNumero1jTextCedulaActionPerformed

    private void jTextNumero2jTextCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNumero2jTextCedulaActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jTextNumero2jTextCedulaActionPerformed

    private void jTextNumero3jTextCedulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNumero3jTextCedulaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextNumero3jTextCedulaActionPerformed

    private void jComboBoxPlan1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlan1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPlan1ActionPerformed

    private void jComboBoxPlan2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlan2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPlan2ActionPerformed

    private void jComboBoxPlan3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPlan3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxPlan3ActionPerformed

    private void jButtonGenerar1jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerar1jButtonEnviarActionPerformed
        // TODO add your handling code here:
        jTextNumero1.setText(this.generarNumero());
    }//GEN-LAST:event_jButtonGenerar1jButtonEnviarActionPerformed

    private void jButtonGenerar2jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerar2jButtonEnviarActionPerformed
        // TODO add your handling code here:
        jTextNumero2.setText(this.generarNumero());
    }//GEN-LAST:event_jButtonGenerar2jButtonEnviarActionPerformed

    private void jButtonGenerar3jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerar3jButtonEnviarActionPerformed
        // TODO add your handling code here:
        jTextNumero3.setText(this.generarNumero());
    }//GEN-LAST:event_jButtonGenerar3jButtonEnviarActionPerformed

    private void jButtonEnviarjButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarjButtonEnviarActionPerformed
        try {
            // TODO add your handling code here:
            
            //Se capturan los datos del cliente para registrarlo o actualizarlo
            String cedula = jTextCedula.getText();
            String nombre = jTextNombre.getText();
            String telefono = jTextTelefono.getText();
            String direccion = jTextDireccion.getText();
            String ciudad = jTextCiudad.getText();
            String tipo = jComboBoxTipo.getItemAt(jComboBoxTipo.getSelectedIndex());
            boolean permiso = true;
            if(!jTextNumero1.getText().isBlank()){//Si el campo de linea 1 no esta vacio, quiere decir que s eesta tratando de usar
                if(jTextNumero1.getText().length()==10){//Se valida que sea un numero valido
                    if(conexion.validarLinea(jTextNumero1.getText())){//El numero ya existe
                        JOptionPane.showMessageDialog(null, "Â¡El numero ingresado en la linea #1 ya se encuentra en uso!",
                                "Numero encontrado", JOptionPane.ERROR_MESSAGE);
                        permiso = false;
                    }
                } else {//Es un numero invalido
                    JOptionPane.showMessageDialog(null, "Â¡Ingrese un numero valido para la linea #1!",
                            "Numero invalido", JOptionPane.ERROR_MESSAGE);
                    permiso = false;
                }
            }
            
            if(!jTextNumero2.getText().isBlank()){//Si el campo de linea 2 no esta vacio, quiere decir que s eesta tratando de usar
                if(jTextNumero2.getText().length()==10){//Se valida que sea un numero valido
                    if(conexion.validarLinea(jTextNumero2.getText())){//El numero ya existe
                        JOptionPane.showMessageDialog(null, "Â¡El numero ingresado en la linea #2 ya se encuentra en uso!",
                                "Numero encontrado", JOptionPane.ERROR_MESSAGE);
                        permiso = false;
                    }
                } else {//Es un numero invalido
                    JOptionPane.showMessageDialog(null, "Â¡Ingrese un numero valido para la linea #2!",
                            "Numero invalido", JOptionPane.ERROR_MESSAGE);
                    permiso = false;
                }
            }
            
            if(!jTextNumero3.getText().isBlank()){//Si el campo de linea 3 no esta vacio, quiere decir que s eesta tratando de usar
                if(jTextNumero3.getText().length()==10){//Se valida que sea un numero valido
                    if(conexion.validarLinea(jTextNumero3.getText())){//El numero ya existe
                        JOptionPane.showMessageDialog(null, "Â¡El numero ingresado en la linea #3 ya se encuentra en uso!",
                                "Numero encontrado", JOptionPane.ERROR_MESSAGE);
                        permiso = false;
                    }
                } else {//Es un numero invalido
                    JOptionPane.showMessageDialog(null, "Â¡Ingrese un numero valido para la linea #3!",
                            "Numero invalido", JOptionPane.ERROR_MESSAGE);
                    permiso = false;
                }
            }
            
            if(jTextNumero1.getText().isBlank() && jTextNumero2.getText().isBlank() && jTextNumero3.getText().isBlank()){//Las tres lineas estan vacias
                JOptionPane.showMessageDialog(null, "Â¡Para poder registrar a un cliente, debe asignarle al menos un numero!",
                        "Ingrese un numero", JOptionPane.ERROR_MESSAGE);
                permiso = false;
            }
            if(permiso) this.registrarCliente(cedula, nombre, telefono, direccion, ciudad, tipo); //Si paso la validacion, se procede a registrar
        } catch (ParseException ex) {
            Logger.getLogger(JPanelRegistrarCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonEnviarjButtonEnviarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        // TODO add your handling code here:
            padreAdmin.eliminarPanel();
            padreAdmin.enableButtons(true);
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jTextNumero1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNumero1KeyTyped
        // TODO add your handling code here:
        if(jTextNumero1.getText().length() >= 10) evt.consume(); //Que solo acepte max 10 digitos
        int key = evt.getKeyChar();
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) evt.consume();//Que solo acepte numeros
    }//GEN-LAST:event_jTextNumero1KeyTyped

    private void jTextNumero2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNumero2KeyTyped
        // TODO add your handling code here:
        if(jTextNumero2.getText().length() >= 10) evt.consume(); //Que solo acepte max 10 digitos
        int key = evt.getKeyChar();
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) evt.consume();//Que solo acepte numeros
    }//GEN-LAST:event_jTextNumero2KeyTyped

    private void jTextNumero3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNumero3KeyTyped
        // TODO add your handling code here:
        if(jTextNumero3.getText().length() >= 10) evt.consume(); //Que solo acepte max 10 digitos
        int key = evt.getKeyChar();
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) evt.consume();//Que solo acepte numeros
    }//GEN-LAST:event_jTextNumero3KeyTyped

    private void jTextTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextTelefonoKeyTyped
        // TODO add your handling code here:
        if(jTextTelefono.getText().length() >= 10) evt.consume(); //Que solo acepte max 10 digitos
        int key = evt.getKeyChar();
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) evt.consume();//Que solo acepte numeros
    }//GEN-LAST:event_jTextTelefonoKeyTyped

    private void jTextCedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCedulaKeyTyped
        // TODO add your handling code here:
        if(jTextCedula.getText().length() >= 10) evt.consume(); //Que solo acepte max 10 digitos
        int key = evt.getKeyChar();
        boolean numeros = key >= 48 && key <= 57;
        if (!numeros) evt.consume();//Que solo acepte numeros
    }//GEN-LAST:event_jTextCedulaKeyTyped

    private void jTextNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNombreKeyTyped
        // TODO add your handling code here:
        if(jTextNombre.getText().length() >= 100) evt.consume(); //Que solo acepte max 100 digitos
        int key = evt.getKeyChar();
        boolean mayusculas = key >= 65 && key <= 90;
        boolean minusculas = key >= 97 && key <= 122;
        boolean espacio = key == 32;
         if (!(minusculas || mayusculas || espacio)) evt.consume();//Que solo acepte letras
    }//GEN-LAST:event_jTextNombreKeyTyped

    private void jTextCiudadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextCiudadKeyTyped
        // TODO add your handling code here:
        if(jTextCiudad.getText().length() >= 100) evt.consume(); //Que solo acepte max 100 digitos
    }//GEN-LAST:event_jTextCiudadKeyTyped

    private void jTextDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextDireccionKeyTyped
        // TODO add your handling code here:
        if(jTextDireccion.getText().length() >= 100) evt.consume(); //Que solo acepte max 100 digitos
    }//GEN-LAST:event_jTextDireccionKeyTyped

    private boolean validarRegistroCliente(){
        boolean exito = true;
        
        if(jTextCedula.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Â¡Ingrese una cedula valida!",
                            "Validacion incorrecta", JOptionPane.ERROR_MESSAGE);
            exito = false;
        }
        
        if(jTextNombre.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Â¡Ingrese un nombre valido!",
                            "Validacion incorrecta", JOptionPane.ERROR_MESSAGE);
            exito = false;
        }
        
        if(jTextTelefono.getText().length()<7){
            JOptionPane.showMessageDialog(null, "Â¡Ingrese un numero telefonico valido!",
                            "Validacion incorrecta", JOptionPane.ERROR_MESSAGE);
            exito = false;
        }
        
        if(jTextCiudad.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Â¡Ingrese una ciudad valida!",
                            "Validacion incorrecta", JOptionPane.ERROR_MESSAGE);
            exito = false;
        }
        
        if(jTextDireccion.getText().isBlank()){
            JOptionPane.showMessageDialog(null, "Â¡Ingrese una direccion valida!",
                            "Validacion incorrecta", JOptionPane.ERROR_MESSAGE);
            exito = false;
        }
        
        return exito;
    }
    
    private void visiblePanelDerecho(Boolean b, Boolean t){//Metodo que muestra u oculta el panel derecho recibe dos booleans, el primero determinar si se debe ocultar o mostrar
                                        //El segundo determina si es un cliente natural o corporativo, siendo true natural.
        if (t){//Caso en el que es natural
            jLabelNumero1.setVisible(b);
            jTextNumero1.setVisible(b);
            jLabelPlan1.setVisible(b);
            jComboBoxPlan1.setVisible(b);
            jButtonGenerar1.setVisible(b);
        } else {//Caso en el que es corporativo
            jLabelNumero1.setVisible(b);
            jTextNumero1.setVisible(b);
            jButtonGenerar1.setVisible(b);
            jLabelPlan1.setVisible(b);
            jComboBoxPlan1.setVisible(b);
            
            jLabelNumero2.setVisible(b);
            jTextNumero2.setVisible(b);
            jButtonGenerar2.setVisible(b);
            jLabelPlan2.setVisible(b);
            jComboBoxPlan2.setVisible(b);
            
            jLabelNumero3.setVisible(b);
            jTextNumero3.setVisible(b);
            jButtonGenerar3.setVisible(b);
            jLabelPlan3.setVisible(b);
            jComboBoxPlan3.setVisible(b);
        }
        //Independientemente de cual sea el caso, se debe aplicar la accion para los botones y el titulo:
        jLabelTituloDerecho.setVisible(b);
        jButtonEnviar.setVisible(b);
        jButtonAtras.setVisible(b);
    }

    private void enablePanelIzquierdo (Boolean b){//Metodo que habilita o inhabilita los elementos del panel izquierdo, dependiento del boolean b que reciba
        
        jTextCedula.setEnabled(b);
        jTextNombre.setEnabled(b);
        jTextTelefono.setEnabled(b);
        jTextCiudad.setEnabled(b);
        jTextDireccion.setEnabled(b);
        jComboBoxTipo.setEnabled(b);
        jButtonSiguiente.setEnabled(b);
        jButtonCancelar.setEnabled(b);
    }
    /* metodo antes del merge
    private void rellenarComboBoxDerechos(){//Metodo que hace una consulta a la base de datos para obtener los planes disponibles y lleanos los combobox
        ArrayList<Plan> planes = conexion.getPlanes();
        for(int i = 0; i<planes.size(); i++){
            jComboBoxPlan1.addItem((planes.get(i)).getNombre());
            jComboBoxPlan2.addItem((planes.get(i)).getNombre());
            jComboBoxPlan3.addItem((planes.get(i)).getNombre());
        }
    }*/
    
    private void rellenarComboBoxDerechos(){//Metodo que hace una consulta a la base de datos para obtener los planes disponibles y lleanos los combobox
        List<Planes> planes = conexion.getPlanes();
        for(int i = 0; i<planes.size(); i++){
            jComboBoxPlan1.addItem((planes.get(i)).getNombre());
            jComboBoxPlan2.addItem((planes.get(i)).getNombre());
            jComboBoxPlan3.addItem((planes.get(i)).getNombre());
        }
    }
    
    private String generarNumero(){//Metodo que genera un numero que no se encuentre registrado
        Random ran = new Random();
        int segundoDigito = ran.nextInt(3) + 0;
        String numero = "3"+segundoDigito;
        int tercerDigito;
        if(segundoDigito==2){//caso en que el numero es 32XXXXXXXX
            tercerDigito= ran.nextInt(4) + 0;
            numero = numero+tercerDigito;
        } else {//Cualquier otro caso
            tercerDigito= ran.nextInt(10) + 0;
            numero = numero+tercerDigito;
        }
        //Hasta este momento el numero tiene 3 digitos
        int digitoAuxiliar;
        for(int i = 0; i<7; i++){//Se le concatenan numeros del 0 al 9 hsta completar 10 digitos
            digitoAuxiliar = ran.nextInt(10) + 0;
            numero = numero+digitoAuxiliar;
        }
        //En este punto ya se genero un numero aleatorio y aunque es muy dificil que ya se haya registrado, va a ser necesario validarlo luego.
        return numero;
    }
    
    private void registrarCliente(String cedula, String nombre, String telefono, String direccion, String ciudad, String tipo) throws ParseException{//Metodo que recibe informacion para registrar un cliente, dependiendo del tipo de cliente
            
        boolean resultadoRegistrarCliente = conexion.registrarClientes(cedula, nombre, telefono, direccion, ciudad, tipo);//Se hace la consulta
            if (resultadoRegistrarCliente) {//La consulta es exitosa
                //Una vez se registro el cliente, se le debe crear una cuenta y sus respectivas lineas
                    //Basicamente toca hacer lo mismo para los tres distintos numeros, valiendose de las validaciones
                    boolean vacio1 = false;
                    boolean vacio2 = false;
                    boolean vacio3 = false;
                    if(jTextNumero1.getText().isBlank())vacio1 = true;
                    if(jTextNumero2.getText().isBlank())vacio2 = true;//Se determina cuales campos de numeros estan vacios
                    if(jTextNumero3.getText().isBlank())vacio3 = true;
                    if(!vacio1){ //Se hace el registro de linea y cuenta para el numero y plan 1
                        int idPlan1 = jComboBoxPlan1.getSelectedIndex()+1;
                        String numero1 = jTextNumero1.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero1, idPlan1);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero1);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡El registro de los datos del cliente y su linea #1 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero1);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                    if(!vacio2){ //Se hace el registro de linea y cuenta para el numero y plan 2
                        int idPlan2 = jComboBoxPlan2.getSelectedIndex()+1;
                        String numero2 = jTextNumero2.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero2, idPlan2);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero2);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡El registro de los datos del cliente y su linea #2 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero2);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    
                    if(!vacio3){ //Se hace el registro de linea y cuenta para el numero y plan 3
                        int idPlan3 = jComboBoxPlan3.getSelectedIndex()+1;
                        String numero3 = jTextNumero3.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero3, idPlan3);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero3);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡El registro de los datos del cliente y su linea #3 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero3);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                    } //En este punto se reaizaron los registros de todos los numeros si todo salio bien
                
            } else {//El registro del cliente en cuestion falla
                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                    "Registro fallido", JOptionPane.ERROR_MESSAGE);
            }
           padreAdmin.eliminarPanel();//Independientemente de si la consulta es exitosa o falla, se elimina el panel y se habilitan los botones
           padreAdmin.enableButtons(true);
    }
    
    private void actualizarCliente(String cedula, String nombre, String telefono, String direccion, String ciudad){
        ArrayList<Cuenta> cuentas = conexion.getCuentas(clienteActualizar.getCedula());//Cuentas que tiene el cliente actualmente
        boolean resultadoActualizarCliente = conexion.updateCliente(cedula, nombre, telefono, direccion, ciudad);//Se hace la consulta
        if(resultadoActualizarCliente){//Si se pudo actualizar el cliente
            if (tipoCliente){//Si es un cliente natural
                //Se deben actualizar las lineas del cliente, es suficiente solo con el numero en la linea, pues este se propaga a la cuenta
            int idPlan1 = jComboBoxPlan1.getSelectedIndex()+1;
            String numeroNuevo = jTextNumero1.getText();
            String numeroViejo = cuentas.get(0).getNumero();
            System.out.println(idPlan1);
            System.out.println(numeroViejo);
            System.out.println(numeroNuevo);
            boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo,idPlan1, numeroNuevo);
            System.out.println(resultadoActualizarLinea);
            if(resultadoActualizarLinea){//Se pudo actualizar la linea
                JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea fue exitosa!",
                    "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
            } else {//Fallo la actualizacion de la linea
                JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea!",
                        "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                }
            } else {//Si es un cliente corporativo
                //Se deben actualizar los numeros siempre y cuando los campos no esten vacios
                boolean vacio1 = false;
                boolean vacio2 = false;
                boolean vacio3 = false;
                if(jTextNumero1.getText().isBlank())vacio1 = true;
                if(jTextNumero2.getText().isBlank())vacio2 = true;//Se determina cuales campos de numeros estan vacios
                if(jTextNumero3.getText().isBlank())vacio3 = true;
                int cantidadNumeros = conexion.getCuentas(clienteActualizar.getCedula()).size();//Se guarda en una variable la cantidad de numeros que tiene el cliente
                switch(cantidadNumeros){
                    case 1:{//Solo tiene un numero
                        if(!vacio1){ //Se hace la actualizacion de la linea1
                        int idPlan1 = jComboBoxPlan1.getSelectedIndex()+1;
                        String numeroNuevo1 = jTextNumero1.getText();
                        String numeroViejo1 = cuentas.get(0).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo1, idPlan1, numeroNuevo1);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #1 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #1!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        if(!vacio2){ //Se hace el registro de linea y cuenta para el numero y plan 2
                        int idPlan2 = jComboBoxPlan2.getSelectedIndex()+1;
                        String numero2 = jTextNumero2.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero2, idPlan2);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero2);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y el registro de su linea #2 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero2);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                        }
                        
                        if(!vacio3){ //Se hace el registro de linea y cuenta para el numero y plan 3
                        int idPlan3 = jComboBoxPlan3.getSelectedIndex()+1;
                        String numero3 = jTextNumero3.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero3, idPlan3);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero3);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y el registro de su linea #3 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero3);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                        }   
                        
                        break;
                    }
                    case 2:{//Tiene dos numeros :o
                        if(!vacio1){ //Se hace la actualizacion de la linea1
                        int idPlan1 = jComboBoxPlan1.getSelectedIndex()+1;
                        String numeroNuevo1 = jTextNumero1.getText();
                        String numeroViejo1 = cuentas.get(0).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo1, idPlan1, numeroNuevo1);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #1 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #1!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        if(!vacio2){ //Se hace la actualizacion de la linea2
                        int idPlan2 = jComboBoxPlan2.getSelectedIndex()+1;
                        String numeroNuevo2 = jTextNumero2.getText();
                        String numeroViejo2 = cuentas.get(1).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo2, idPlan2, numeroNuevo2);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #2 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #2!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        if(!vacio3){ //Se hace el registro de linea y cuenta para el numero y plan 3
                        int idPlan3 = jComboBoxPlan3.getSelectedIndex()+1;
                        String numero3 = jTextNumero3.getText();
                        Boolean resultadoRegistrarLinea = conexion.registrarLinea(numero3, idPlan3);//Se hace el registro de la linea
                        if (resultadoRegistrarLinea){//El registro de Linea fue exitoso
                            Boolean resultadoRegistrarCuenta = conexion.registrarCuenta(cedula, numero3);//Se hace el registro de la cuenta
                            if(resultadoRegistrarCuenta){//El registro de cuenta fue exitoso
                                JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y el registro de su linea #3 fue exitoso!",
                        "Registro exitoso", JOptionPane.INFORMATION_MESSAGE);
                            } else {//El registro de cuenta fallo
                                //Como no se pudo registrar la cuenta, pero si la linea y el cliente, se deben borrar
                                conexion.eliminarLinea(numero3);
                                conexion.eliminarCliente(cedula);
                                JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                                "Registro fallido", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {//El registro de Linea fallo
                            //Como no se pudo registrar la Linea, se debe borrar el cliente que se registro
                            conexion.eliminarCliente(cedula);
                            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar el registro!",
                            "Registro fallido", JOptionPane.ERROR_MESSAGE);
                        }
                        } 
                        break;
                    }
                    case 3:{//Tiene los tres numeros alv
                        if(!vacio1){ //Se hace la actualizacion de la linea1
                        int idPlan1 = jComboBoxPlan1.getSelectedIndex()+1;
                        String numeroNuevo1 = jTextNumero1.getText();
                        String numeroViejo1 = cuentas.get(0).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo1, idPlan1, numeroNuevo1);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #1 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #1!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        if(!vacio2){ //Se hace la actualizacion de la linea2
                        int idPlan2 = jComboBoxPlan2.getSelectedIndex()+1;
                        String numeroNuevo2 = jTextNumero2.getText();
                        String numeroViejo2 = cuentas.get(1).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo2, idPlan2, numeroNuevo2);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #2 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #2!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        
                        if(!vacio3){ //Se hace la actualizacion de la linea2
                        int idPlan3 = jComboBoxPlan3.getSelectedIndex()+1;
                        String numeroNuevo3 = jTextNumero3.getText();
                        String numeroViejo3 = cuentas.get(2).getNumero();
                        Boolean resultadoActualizarLinea = conexion.updateLinea(numeroViejo3, idPlan3, numeroNuevo3);
                        if(resultadoActualizarLinea){//Se pudo actualizar la linea
                            JOptionPane.showMessageDialog(null, "Â¡La actualizacion de los datos del cliente y de su linea #3 fue exitosa!",
                                "Actualizacion exitosa", JOptionPane.INFORMATION_MESSAGE);
                        } else {//Fallo la actualizacion de la linea
                            JOptionPane.showMessageDialog(null, "Â¡Se realizo la actualizacion de los datos del cliente, pero fallo la actualizacion de su linea #3!",
                                "Actualizacion parcial", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                        break;
                    }
                }
                }   
        } else {//Si no se pudo actualizar al cliente
            JOptionPane.showMessageDialog(null, "Â¡No se pudo realizar la actualizacion!",
                        "Actualizacion fallida", JOptionPane.ERROR_MESSAGE);
        }
        padreModificar.enableButtons(true);
        padreModificar.eliminarPanel();
    }
    
    private void prepararUpdate(){//Metodo que trae los datos del cliente a actualizar y llena los campos y los bloquea
        //Se holdean todos los parametros del panel izquierdo
        jTextCedula.setText(clienteActualizar.getCedula());
        jTextCedula.setEnabled(false);
        jTextNombre.setText(clienteActualizar.getNombre());
        jTextTelefono.setText(clienteActualizar.getTelefono());
        jTextCiudad.setText(clienteActualizar.getCiudad());
        jTextDireccion.setText(clienteActualizar.getDireccion());
        int n;
        if(clienteActualizar.getTipo()==TipoCliente.natural){
            n=0;
        } else {
            n=1;
        }
        jComboBoxTipo.setSelectedIndex(n);
        jComboBoxTipo.setEnabled(false);
        //Se holdean todos los parametros del panel derecho
        ArrayList<Cuenta> cuentas = conexion.getCuentas(clienteActualizar.getCedula());
        int cantidadNumeros = conexion.getCuentas(clienteActualizar.getCedula()).size();//Se guarda en una variable la cantidad de numeros que tiene el cliente
        switch(cantidadNumeros){
            case 1:{//Solo tiene un numero
                jTextNumero1.setText(cuentas.get(0).getNumero());
                jComboBoxPlan1.setSelectedIndex(conexion.getLinea(cuentas.get(0).getNumero()).getPlan()-1);
                break;
            }
            case 2:{//Tiene dos numeros :o
                jTextNumero1.setText(cuentas.get(0).getNumero());
                jComboBoxPlan1.setSelectedIndex(conexion.getLinea(cuentas.get(0).getNumero()).getPlan()-1);
                
                jTextNumero2.setText(cuentas.get(1).getNumero());
                jComboBoxPlan2.setSelectedIndex(conexion.getLinea(cuentas.get(1).getNumero()).getPlan()-1);
                break;
            }
            case 3:{//Tiene los tres numeros alv
                jTextNumero1.setText(cuentas.get(0).getNumero());
                jComboBoxPlan1.setSelectedIndex(conexion.getLinea(cuentas.get(0).getNumero()).getPlan()-1);
                
                jTextNumero2.setText(cuentas.get(1).getNumero());
                jComboBoxPlan2.setSelectedIndex(conexion.getLinea(cuentas.get(1).getNumero()).getPlan()-1);
                
                jTextNumero3.setText(cuentas.get(2).getNumero());
                jComboBoxPlan3.setSelectedIndex(conexion.getLinea(cuentas.get(2).getNumero()).getPlan()-1);
                break;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAtras;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JButton jButtonGenerar1;
    private javax.swing.JButton jButtonGenerar2;
    private javax.swing.JButton jButtonGenerar3;
    private javax.swing.JButton jButtonSiguiente;
    public javax.swing.JComboBox<String> jComboBoxPlan1;
    public javax.swing.JComboBox<String> jComboBoxPlan2;
    public javax.swing.JComboBox<String> jComboBoxPlan3;
    public javax.swing.JComboBox<String> jComboBoxTipo;
    private javax.swing.JLabel jLabelCedula;
    private javax.swing.JLabel jLabelCiudad;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelNumero1;
    private javax.swing.JLabel jLabelNumero2;
    private javax.swing.JLabel jLabelNumero3;
    private javax.swing.JLabel jLabelPlan1;
    private javax.swing.JLabel jLabelPlan2;
    private javax.swing.JLabel jLabelPlan3;
    private javax.swing.JLabel jLabelTelefono;
    private javax.swing.JLabel jLabelTipo;
    public javax.swing.JLabel jLabelTituloDerecho;
    public javax.swing.JLabel jLabelTituloIzquierdo;
    public javax.swing.JTextField jTextCedula;
    public javax.swing.JTextField jTextCiudad;
    public javax.swing.JTextField jTextDireccion;
    public javax.swing.JTextField jTextNombre;
    public javax.swing.JTextField jTextNumero1;
    public javax.swing.JTextField jTextNumero2;
    public javax.swing.JTextField jTextNumero3;
    public javax.swing.JTextField jTextTelefono;
    // End of variables declaration//GEN-END:variables
}
